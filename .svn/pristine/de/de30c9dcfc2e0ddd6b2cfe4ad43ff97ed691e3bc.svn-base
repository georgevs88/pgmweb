package pmcg.imti.view;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;

import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Paging;
import org.zkoss.zul.event.PagingEvent;

import pmcg.framework.ui.WindowCrud;
import pmcg.framework.util.WinUtils;
import pmcg.imti.dao.ibatis.Projex_DivDAO;
import pmcg.imti.dao.ibatis.Projex_ProDAO;
import pmcg.imti.dao.ibatis.RemDAO;
import pmcg.imti.domain.Projex_DivVO;
import pmcg.imti.domain.Projex_ProVO;
import pmcg.imti.domain.RemVO;

public class Verpro extends WindowCrud{
	private static final long serialVersionUID = 1L;
	public List<Projex_ProVO> listProc;
	public Projex_ProVO procSel;
	public List<Projex_DivVO> listDiv;
	public Projex_DivVO divSel;
	public List<RemVO> listRem;
	public RemVO remSel;	
	
	public void initComponentes() throws SQLException{
		getCrdBar().getBotao(0).setVisible(false);
		getCrdBar().getBotao(1).setVisible(false);
		getCrdBar().getBotao(2).setVisible(false);
		getCrdBar().getBotao(3).setVisible(false);
		getCrdBar().getBotao(4).setVisible(false);
		getCrdBar().getBotao(5).setVisible(false);
		listRem = new RemDAO().getTodos(null);
		vincular();
	}
	
	public void selecionarRem(){
		pesquisar();
	}
	
	public void selecionar(){
		listDiv = new Projex_DivDAO().getDivByProcesso(procSel.getId_processo());
		vincular();
	}
	
	@Override
	public void salvar() throws InterruptedException {
		try {
			if (Messagebox.show("Tem certeza que deseja Salvar o Processo?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
				new Projex_ProDAO().updProcesso(procSel);
				Messagebox.show("Processo Salvo com Sucesso!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
				pesquisar();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void salvarDiv() throws InterruptedException {
		try {
			if (Messagebox.show("Tem certeza que deseja Salvar a Dívida?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
				new Projex_DivDAO().updDivida(divSel);
				Messagebox.show("Dívida Salva com Sucesso!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
				pesquisar();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void imprimePeticao() throws InterruptedException{
		if(procSel == null || procSel.getInscricao() == null){
			Messagebox.show("Selecione um processo!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		} else {
			HashMap<String, String> param = new HashMap<String, String>();
			param.put("inscricao", procSel.getInscricao());
			param.put("codrem", remSel.getCodrem().toString());
			new WinUtils().abrirBirt("peticao.rptdesign", param);
		}
	}
	
	public void imprimeCDA() throws InterruptedException{
		if(procSel == null || procSel.getInscricao() == null){
			Messagebox.show("Selecione um processo!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		} else {
			HashMap<String, String> param = new HashMap<String, String>();
			param.put("inscricao", procSel.getInscricao());
			param.put("codrem", remSel.getCodrem().toString());
			new WinUtils().abrirBirt("cda.rptdesign", param);
		}
	}

	public String getEstatistica(){
		if(listProc != null && listProc.size() >0){
			return "Qtde de Processos à analisar: " + listProc.size() + ".";
		} else {
			return "";
		}
	}
	
	public void pesquisar() {
//		HashMap<String, Object> param = new HashMap<String, Object>();
//		param.put("nprepd", paramProc!=null&&(!paramProc.isEmpty())?paramProc:null); 
		
		Paging pag = (Paging) this.getComponente("pagProc");
		pag.setTotalSize(new Projex_ProDAO().countNaoVerificadosByImportacao(remSel.getCodrem()));
		Integer qtd = pag.getTotalSize();
		if (qtd == 0) {
			try {
				Messagebox.show("Nenhum resultado encontrado!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		final int PAGE_SIZE = pag.getPageSize();
		redraw(0, PAGE_SIZE);
		pag.setActivePage(0);
		pag.setDetailed(true);
		pag.addEventListener("onPaging", new EventListener() {
			public void onEvent(Event event) {
				PagingEvent pe = (PagingEvent) event;
				int pgno = pe.getActivePage();
				int ofs = pgno * PAGE_SIZE;
				redraw(ofs, PAGE_SIZE);
				vincular();
			}
		});
		vincular();
	}
	
	private void redraw(Integer inicial, Integer maximoPermitido) {
		
		listProc = new Projex_ProDAO().getNaoVerificadosByImportacao(remSel.getCodrem(), inicial, maximoPermitido);
//		if(listEpd != null && listEpd.size() == 1){
//			epdSel = listEpd.get(0);
//			selecionaProt();
//		}
	}
	
	public Boolean isProcessoSelecionado(){
		if(procSel != null){
			return true;
		} else {
			return false;
		}
	}
	
	public Boolean isDividaSelecionada(){
		if(divSel != null){
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	public void incluir() throws InterruptedException {
	}

	@Override
	public void apagar() throws InterruptedException {
	}

	@Override
	public void limpar() throws InterruptedException {
		vincular();
	}

	@Override
	public void imprimir() throws InterruptedException {
	}

	@Override
	public void sair() throws InterruptedException {
		detach();
	}

}
