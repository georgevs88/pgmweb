package pmcg.imti.view;

import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;

import org.zkoss.zk.ui.WrongValueException;
import org.zkoss.zul.Messagebox;

import pmcg.framework.ui.WindowCrud;
import pmcg.framework.util.WinUtils;
import pmcg.imti.dao.ibatis.PadDAO;
import pmcg.imti.dao.ibatis.RaiDAO;
import pmcg.imti.domain.PadVO;
import pmcg.imti.util.Formatacao;

public class Padcad extends WindowCrud {

	private static final long serialVersionUID = 1L;
	public PadVO padVO = new PadVO();
	
	public void initComponentes() throws SQLException {
		padVO.setImopad("06710250578");
		padVO.setPropad("0988261316");
		atualizaTela();
	}
	
//	public void processarPad() throws SQLException, InterruptedException, IOException{
//		List<PadVO> listPad = new PadDAO().getTodos(null);
//		if(listPad != null && listPad.size() > 0){
//			File file;
//			if(modoDesenv){
//				file = new File("C:\\PGM\\" + new SimpleDateFormat("ddMMyyyy").format(new Date()) + "PAD.txt");
//			} else {
//				file = new File("/tmp/PMCG" + new SimpleDateFormat("ddMMyyyy").format(new Date()) + "PAD.txt");
//			}
//			BufferedWriter buffWrite = new BufferedWriter(new FileWriter(file));
//			Integer count = 1;
//			for(PadVO pad : listPad){
//				HashMap<String, Object> param = new HashMap<String, Object>();
//				param.put("inscricao", new Formatacao().zeroEsquerda(pad.getImopad().replaceAll("-", ""),11)); 
//				param.put("processo", new Formatacao().zeroEsquerda(pad.getPropad().replaceAll("-", "").replaceAll("/", ""),10));
//				List<HashMap<String, Object>> consulta = new RaiDAO().getConteudoArq(param);
//				for(HashMap<String, Object> con : consulta){
//					if(con != null && con.get("NUMCAD")!=null){
//						String conteudo = con.get("CODCAD_TRDEB").toString() + "#" +
//											con.get("NUMCAD").toString() + "#" +
//											con.get("ANOLAN_TRDEB").toString() + "#" +
//											con.get("CODTRB").toString() + "#" +
//											con.get("NUMPRE").toString() + "#" +
//											con.get("CODDLA").toString() + "#" +
//											con.get("SEQLAN").toString() + "#" +
//											con.get("NUMPRO").toString() + "#" +
//											con.get("ANOPRO").toString() + "#" +
//											con.get("DIGPRO").toString() + "#" +
//											con.get("DATPRO").toString() + "#" +
//											con.get("NUMAUT").toString() + "#" +
//											con.get("DATAUT").toString() + "#" +
//											con.get("DATCAD").toString();
//								
//						pad.setDespad(conteudo);
//						new PadDAO().updRegByCod(pad);
//						
//						buffWrite.append(conteudo + "\n");
//					}
//				}
//				System.out.println("Registro " + count + " de " + listPad.size() + " -> iddpad = " + pad.getIddpad());
//				count++;
//			}
//			buffWrite.close();
//			new Filedownload().save(new AMedia(file, null, null),"text/plain");
//		}
//	}
	
	public void buscaDados(){
		if(padVO.getImopad() != null && padVO.getPropad() != null){
			HashMap<String, Object> param = new HashMap<String, Object>();
			param.put("inscricao", new Formatacao().zeroEsquerda(padVO.getImopad().replaceAll("-", ""),11)); 
			param.put("processo", new Formatacao().zeroEsquerda(padVO.getPropad().replaceAll("-", "").replaceAll("/", ""),10));
			HashMap<String, Object> consulta = new RaiDAO().getConsultaProc(param);
			if(consulta != null && consulta.get("NUMPRO") != null){
				padVO.setCpfpad(consulta.get("CPFCGC_TRCON").toString());
				padVO.setConpad(consulta.get("NOMRAZ_TRCON").toString());
				padVO.setDttpad((Date) consulta.get("DATTRA"));
				vincular();
			}
		}
	}
	
	public void trataVO(){
		if(padVO.getImopad() == null || padVO.getImopad().isEmpty() || padVO.getImopad().replaceAll("-", "").isEmpty()){
			throw new WrongValueException(getComponente("imopad"),"Informe a Inscrição!");
		}
		if(padVO.getPropad() == null || padVO.getPropad().isEmpty() || padVO.getImopad().replaceAll("-", "").replaceAll("/", "").isEmpty()){
			throw new WrongValueException(getComponente("propad"),"Informe o Nr do Processo!");
		}
		if(padVO.getIddpad() == null){
			Integer qtdpad = new PadDAO().getVerificaProc(padVO);
			if(qtdpad != null && qtdpad > 0){
				throw new WrongValueException(getComponente("propad"),"Processo já cadastrado!");
			}
		}
		if(padVO.getValpad() == null || padVO.getValpad() < 0){
			throw new WrongValueException(getComponente("valpad"),"Informe o Valor!");
		}
		if(padVO.getCpfpad() == null || padVO.getCpfpad().isEmpty() || padVO.getCpfpad().replaceAll("-", "").replaceAll("/", "").replaceAll("[.]", "").isEmpty()){
			throw new WrongValueException(getComponente("cpfpad"),"Informe o CPF/CNPJ!");
		}
		if(padVO.getConpad() == null || padVO.getConpad().isEmpty()){
			throw new WrongValueException(getComponente("conpad"),"Informe o Contribuinte!");
		}
		if(padVO.getDttpad() == null){
			throw new WrongValueException(getComponente("dttpad"),"Informe a Data do Trânsito Julgado!");
		}
		padVO.setUsualt(getLogin());
	}
	
	@Override
	public void incluir() throws InterruptedException {
		trataVO();
		if (Messagebox.show("Tem certeza que deseja Cadastrar o Processo ADM?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
			try {
				Long idd = (Long) new PadDAO().insReg(padVO);
				if(idd != null && idd > 0){
					Messagebox.show("Processo cadastrado com sucesso!");
					atualizaTela();
				} else {
					Messagebox.show("Não foi possível cadastrar a Licença/Dispensa!");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void atualizaTela(){
		if(padVO != null && padVO.getIddpad() != null){
			getCrdBar().getBotao(0).setVisible(false);
			getCrdBar().getBotao(1).setVisible(true);
			getCrdBar().getBotao(2).setVisible(true);
			getCrdBar().getBotao(3).setVisible(true);
			getCrdBar().getBotao(4).setVisible(true);
			getCrdBar().getBotao(5).setVisible(false);
		} else {
			getCrdBar().getBotao(0).setVisible(true);
			getCrdBar().getBotao(1).setVisible(false);
			getCrdBar().getBotao(2).setVisible(false);
			getCrdBar().getBotao(3).setVisible(true);
			getCrdBar().getBotao(4).setVisible(true);
			getCrdBar().getBotao(5).setVisible(false);
		}
		vincular();
	}
	
	@Override
	public void apagar() throws InterruptedException {
		if (Messagebox.show("Tem certeza que deseja Excluir o Processo?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
			try {
				Integer codupd = new PadDAO().delReg(padVO.getIddpad());
				if(codupd != null && codupd > 0){
					Messagebox.show("Processo ADM excluído com sucesso!");
					atualizaTela();
				} else {
					Messagebox.show("Não foi possível excluir o Processo ADM!");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void imprimir() throws InterruptedException {
		
	}

	

	@Override
	public void limpar() throws InterruptedException {
		padVO = new PadVO();
		atualizaTela();
	}

	@Override
	public void pesquisar() throws InterruptedException {
		new WinUtils().abrirLis("/forms/padlis.zul", null, this, "retPad");
	}
	
	public void retPad(Object pad) throws SQLException {
		padVO = (PadVO) pad;
		atualizaTela();
	}

	@Override
	public void sair() throws InterruptedException {
		this.detach();
	}

	@Override
	public void salvar() throws InterruptedException {
		trataVO();
		if (Messagebox.show("Tem certeza que deseja Salvar o Processo?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
			try {
				Integer codupd = new PadDAO().updRegByCod(padVO);
				if(codupd != null && codupd > 0){
					Messagebox.show("Processo ADM salvo com sucesso!");
					atualizaTela();
				} else {
					Messagebox.show("Não foi possível salvar o Processo ADM!");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
}
