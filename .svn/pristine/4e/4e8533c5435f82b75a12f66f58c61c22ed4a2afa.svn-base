package pmcg.imti.view;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;

import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Paging;
import org.zkoss.zul.event.PagingEvent;

import pmcg.framework.ui.WindowCrud;
import pmcg.framework.util.WinUtils;
import pmcg.imti.dao.ibatis.Projex_DivDAO;
import pmcg.imti.dao.ibatis.Projex_ProDAO;
import pmcg.imti.dao.ibatis.RemDAO;
import pmcg.imti.domain.Projex_DivVO;
import pmcg.imti.domain.Projex_ProVO;
import pmcg.imti.domain.RemVO;
import pmcg.imti.util.FormatUtils;

public class Verpro extends WindowCrud{
	private static final long serialVersionUID = 1L;
	public List<Projex_ProVO> listProc;
	public Projex_ProVO procParam = new Projex_ProVO();
	public Projex_ProVO procSel;
	public List<Projex_DivVO> listDiv;
	public Projex_DivVO divSel;
	public List<RemVO> listRem;
	public RemVO remSel;	
	
	public void initComponentes() throws SQLException{
		getCrdBar().getBotao(0).setVisible(false);
		getCrdBar().getBotao(1).setVisible(false);
		getCrdBar().getBotao(2).setVisible(false);
		getCrdBar().getBotao(3).setVisible(true);
		getCrdBar().getBotao(4).setVisible(false);
		getCrdBar().getBotao(5).setVisible(false);
		listRem = new RemDAO().getTodos(null);
		procParam.setVara("T");
		procParam.setVerificado("T");
		vincular();
	}
	
	public void selecionarRem() throws InterruptedException{
		procParam.setCodrem(remSel.getCodrem());
		pesquisar();
	}
	
	public void selecionar(){
		listDiv = new Projex_DivDAO().getDivByProcesso(procSel.getId_processo());
		vincular();
	}
	
	@Override
	public void salvar() throws InterruptedException {
		if(procSel != null){
			try {
				if (Messagebox.show("Tem certeza que deseja Salvar o Processo?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
					procSel.setUsualt(getLogin());
					new Projex_ProDAO().updProcesso(procSel);
					Messagebox.show("Processo Salvo com Sucesso!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
					limpar();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			Messagebox.show("Selecione um processo!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		}
	}
	
	public void salvarDiv() throws InterruptedException {
		if(divSel != null){
			try {
				if (Messagebox.show("Tem certeza que deseja Salvar a Dívida?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
					divSel.setUsualt(getLogin());
					new Projex_DivDAO().updDivida(divSel);
					Messagebox.show("Dívida Salva com Sucesso!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
					pesquisar();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			Messagebox.show("Selecione uma dívida!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		}
	}
	
	public void verificar() throws InterruptedException {
		if(procSel != null){
			try {
				if (Messagebox.show("Tem certeza que deseja Confirmar a Verificação?","Aviso!!!", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
					procSel.setUsualt(getLogin());
					new Projex_ProDAO().updProcVerificado(procSel);
					Messagebox.show("Processo Salvo com Sucesso!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
					limpar();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			Messagebox.show("Selecione um processo!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		}
	}
	
	public void imprimePeticao() throws InterruptedException{
		if(procSel == null || procSel.getInscricao() == null){
			Messagebox.show("Selecione um processo!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		} else {
			HashMap<String, String> param = new HashMap<String, String>();
			param.put("inscricao", procSel.getInscricao());
			param.put("codrem", remSel.getCodrem().toString());
			new WinUtils().abrirBirt("peticao.rptdesign", param);
		}
	}
	
	public void imprimeCDA() throws InterruptedException{
		if(procSel == null || procSel.getInscricao() == null){
			Messagebox.show("Selecione um processo!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		} else {
			HashMap<String, String> param = new HashMap<String, String>();
			param.put("inscricao", procSel.getInscricao());
			param.put("codrem", remSel.getCodrem().toString());
			new WinUtils().abrirBirt("cda.rptdesign", param);
		}
	}

	public String getEstatistica(){
		if(listProc != null && listProc.size() >0){
			return "Qtde de Processos à analisar: " + listProc.size() + ".";
		} else {
			return "";
		}
	}
	
	public void pesquisar() throws InterruptedException {
		if(remSel != null){
			Paging pag = (Paging) this.getComponente("pagProc");
			Projex_ProVO p = new Projex_ProVO();
			p.setCodrem(remSel.getCodrem());
			p.setInscricao(procParam.getInscricao()!=null&&new FormatUtils().onlyNumbers(procParam.getInscricao()).length() > 0?new FormatUtils().onlyNumbers(procParam.getInscricao()):null);
			p.setCpf_cnpj(procParam.getCpf_cnpj()!=null&&new FormatUtils().onlyNumbers(procParam.getCpf_cnpj()).length() > 0?new FormatUtils().onlyNumbers(procParam.getCpf_cnpj()):null);
			p.setNumero_certidao(procParam.getNumero_certidao()!=null&&new FormatUtils().onlyNumbers(procParam.getNumero_certidao()).length() > 0?new FormatUtils().onlyNumbers(procParam.getNumero_certidao()):null);
			p.setVara(procParam.getVara()!=null&&procParam.getVara().equalsIgnoreCase("T")?null:procParam.getVara());
			p.setVerificado(procParam.getVerificado()!=null&&procParam.getVerificado().equalsIgnoreCase("T")?null:procParam.getVerificado());
			pag.setTotalSize(new Projex_ProDAO().countProcByImportacao(p));
			Integer qtd = pag.getTotalSize();
			if (qtd == 0) {
				try {
					Messagebox.show("Nenhum resultado encontrado!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			final int PAGE_SIZE = pag.getPageSize();
			redraw(0, PAGE_SIZE);
			pag.setActivePage(0);
			pag.setDetailed(true);
			pag.addEventListener("onPaging", new EventListener() {
				public void onEvent(Event event) {
					PagingEvent pe = (PagingEvent) event;
					int pgno = pe.getActivePage();
					int ofs = pgno * PAGE_SIZE;
					redraw(ofs, PAGE_SIZE);
					vincular();
				}
			});
			vincular();
		} else {
			Messagebox.show("Selecione uma remessa!", "Aviso!", Messagebox.OK, Messagebox.INFORMATION);
		}
	}
	
	private void redraw(Integer inicial, Integer maximoPermitido) {
		Projex_ProVO p = new Projex_ProVO();
		p.setCodrem(remSel.getCodrem());
		p.setInscricao(procParam.getInscricao()!=null&&new FormatUtils().onlyNumbers(procParam.getInscricao()).length() > 0?new FormatUtils().onlyNumbers(procParam.getInscricao()):null);
		p.setCpf_cnpj(procParam.getCpf_cnpj()!=null&&new FormatUtils().onlyNumbers(procParam.getCpf_cnpj()).length() > 0?new FormatUtils().onlyNumbers(procParam.getCpf_cnpj()):null);
		p.setNumero_certidao(procParam.getNumero_certidao()!=null&&new FormatUtils().onlyNumbers(procParam.getNumero_certidao()).length() > 0?new FormatUtils().onlyNumbers(procParam.getNumero_certidao()):null);
		p.setVara(procParam.getVara()!=null&&procParam.getVara().equalsIgnoreCase("T")?null:procParam.getVara());
		p.setVerificado(procParam.getVerificado()!=null&&procParam.getVerificado().equalsIgnoreCase("T")?null:procParam.getVerificado());
		listProc = new Projex_ProDAO().getProcByImportacao(p, inicial, maximoPermitido);
		if(listProc != null && listProc.size() == 1){
			procSel = listProc.get(0);
			selecionar();
		}
	}
	
	public Boolean isProcessoSelecionado(){
		if(procSel != null){
			return true;
		} else {
			return false;
		}
	}
	
	public Boolean isDividaSelecionada(){
		if(divSel != null){
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	public void incluir() throws InterruptedException {
	}

	@Override
	public void apagar() throws InterruptedException {
	}

	@Override
	public void limpar() throws InterruptedException {
		remSel = null;	
		procParam = new Projex_ProVO();
		procParam.setVara("T");
		procParam.setVerificado("T");
		listProc = null;
		procSel = null;
		listDiv = null;
		divSel = null;
		vincular();
	}

	@Override
	public void imprimir() throws InterruptedException {
	}

	@Override
	public void sair() throws InterruptedException {
		detach();
	}

}
