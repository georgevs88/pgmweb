package pmcg.imti.view;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.zkoss.zul.ListModelList;
import org.zkoss.zul.Messagebox;

import pmcg.framework.ui.SubPesquisa;
import pmcg.framework.ui.WindowCrud;
import pmcg.framework.util.WinUtils;

import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.WrongValueException;

import pmcg.framework.exception.ConcorrenciaException;
import pmcg.imti.dao.ibatis.FunDAO;
import pmcg.imti.dao.ibatis.VincDAO;
import pmcg.imti.domain.FunVO;
import pmcg.imti.domain.VincVO;

/**
 * View de Cadastro de Vinc
 **/
public class Vinccad extends WindowCrud {
	private static final long serialVersionUID = 1L;

	public VincVO vincVO = new VincVO();
	Boolean abertoPeloMenu = Boolean.TRUE;

	@SuppressWarnings("unchecked")
	public Vinccad() {
		super("vinccad.zul");
		Map<String, String> map = Executions.getCurrent().getArg();
		if (map.get("pageName") != null) {
			abertoPeloMenu = Boolean.FALSE;
		}
	}

	/**
	 * Metodo initComponentes() - para inicializar a view.
	 **/
	public void initComponentes() {

		ctrlBotoesIncAltDel(false);

		this.vincular();
	}

	/**
	 * Metodo incluir()- Metodo responsável pela incluir o registro.
	 **/
	@Override
	public void incluir() {
		try {
			if (this.validarForm() && this.trataVO()) {

				VincDAO vincDAO = new VincDAO();
				Long cod = new Long(vincDAO.insReg(this.vincVO).toString());
				if (cod > 0) {
					this.vincVO.setIdvinc(cod);
					if (this.abertoPeloMenu) {
						Messagebox.show("O Registro foi incluído com sucesso!");
					} else {
						this.sair();
					}
					ctrlBotoesIncAltDel(true);
					this.vincular();
				} else {
					Messagebox.show("O registro não pode ser incluído!",
							"Erro:", Messagebox.OK, Messagebox.ERROR);
				}
			}
		} catch (WrongValueException e) {
			throw e;
		} catch (Exception e) {
			try {
				Messagebox.show(
						"O registro não pode ser incluído: " + e.getMessage(),
						"Erro:", Messagebox.OK, Messagebox.ERROR);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
	}

	/**
	 * Metodo salvar()-Metodo responsável em salvar o registro.
	 **/
	@Override
	public void salvar() {
		try {
			if (this.validarForm() && this.trataVO()
					&& this.vincVO.getIdvinc() != null) {

				VincDAO vincDAO = new VincDAO();
				if (vincDAO.updRegByCod(this.vincVO) > 0) {
					if (this.abertoPeloMenu) {
						Messagebox.show("Registro Salvo com sucesso!");
					} else {
						this.sair();
					}
					this.vincular();
				} else {
					Messagebox.show("O registro não pode ser salvo!", "Erro:",
							Messagebox.OK, Messagebox.ERROR);
				}
			}
		} catch (WrongValueException e) {
			throw e;
		} catch (Exception e) {
			try {
				Messagebox.show("O registro não pode ser salvo!", "Erro:",
						Messagebox.OK, Messagebox.ERROR);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}

			e.printStackTrace();
		}
		this.limpar();
	}

	/**
	 * Metodo apagar()-Metodo responsável em apagar o registro.
	 **/
	@Override
	public void apagar() {
		try {
			if (Messagebox.show("Deseja realmente excluir?", "Confirmação",
					Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
				Integer qtd = new VincDAO().delReg(vincVO.getIdvinc());
				Messagebox.show("Registro excluido com sucesso!");
			}
		} catch (Exception ex) {

		}
		this.limpar();

	}

	public void buscaFun(String[] criterio, String[] pesquisa, int tipo,
			Boolean mem) {
		vincVO.setFunVO((FunVO) new SubPesquisa().buscaSub(vincVO.getFunVO(),
				new FunDAO(), tipo, "funlis.zul", criterio, pesquisa));
		this.vincular();
	}

	public void buscaPai(String[] criterio, String[] pesquisa, int tipo,
			Boolean mem) {
		vincVO.setPaiVO((FunVO) new SubPesquisa().buscaSub(vincVO.getPaiVO(),
				new FunDAO(), tipo, "funlis.zul", criterio, pesquisa));
		this.vincular();
	}

	/**
	 * Metodo limpar()- Metodo reponsável por limpar os campos da tela.
	 **/
	@Override
	public void limpar() {

		this.vincVO = new VincVO();

		ctrlBotoesIncAltDel(false);
		this.vincular();
	}

	/**
	 * Metodo pesquisar()- Metodo responsável pela pesquisa.
	 **/
	@Override
	public void pesquisar() {

		Map<String, String> param = new HashMap<String, String>();
		new WinUtils().abrirLis("/forms/vinclis.zul", param, this, "retVincVO");
	}

	/**
	 * Metodo retVincVO()- Metodo de retorno do pesquisar
	 **/
	public void retVincVO(Object ret) {
		if (ret != null) {

			this.vincVO = (VincVO) ret;
			ctrlBotoesIncAltDel(true);

			this.vincular();
		}
	}

	/**
	 * Metodo imprimir()-Metodo responsável em chamar o relatório.
	 **/
	@Override
	public void imprimir() {
	}

	/**
	 * Metodo trataVO()- Metodo responsável pela validação de alguns campos
	 * existentes na tela.
	 **/
	public boolean trataVO() {
		if (this.vincVO != null) {
			this.vincVO.setUsualt(this.getLogin());
			this.vincVO.setDatalt(WinUtils.getDataBanco());
			this.vincVO.setAtivinc(true);
			this.vincVO.setUsualt(this.vincVO.getUsualt() == null ? null
					: vincVO.getUsualt().toUpperCase());

			return true;
		}
		return false;
	}

	/**
	 * Metodo sair()- Metodo responsável por fechar a tela.
	 **/
	@Override
	public void sair() {
		if (this.abertoPeloMenu) {
			this.detach();
		} else {
			Events.postEvent("onClose", this, this.vincVO);
		}
	}

}
